// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String       @id @default(cuid())
  email                  String       @unique
  full_name             String
  password_hash         String?
  university            String
  bio                   String?      @db.Text
  interests             String[]     @default([])
  profile_image         String?
  student_id_image      String?
  verification_status   String       @default("NONE")
  profile_completed     Boolean      @default(false)
  is_verified          Boolean      @default(false)
  verification_token    String?
  email_verified        DateTime?
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  
  // Social relationships
  followers             User[]       @relation("UserFollows")
  following             User[]       @relation("UserFollows")
  
  // Listings and reviews
  listings              Listing[]
  reviews_received      Review[]     @relation("ReviewsReceived")
  reviews_given         Review[]     @relation("ReviewsGiven")
  
  // Auth and sessions
  Account               Account[]
  Session              Session[]
  
  // Transactions and messaging
  buyerTransactions     Transaction[] @relation("BuyerTransactions")
  sellerTransactions    Transaction[] @relation("SellerTransactions")
  conversations         Conversation[] @relation("UserConversations")
  sentMessages          Message[]     @relation("SentMessages")
  
  // Notifications
  push_subscription           Json?
  notification_preferences    Json?
  notifications_sent         Notification[] @relation("SentNotifications")
  notifications_received     Notification[] @relation("ReceivedNotifications")
  
  // Interactions
  comments              Comment[]
  likes                Like[]
  bookmarks            Bookmark[]
}

model Listing {
  id               String    @id @default(cuid())
  title            String
  description      String    @db.Text
  price            Decimal   @db.Decimal(10, 2)
  category         String
  condition        String
  location         String
  tags             String[]
  allow_swap       Boolean   @default(false)
  allow_negotiation Boolean  @default(true)
  is_available     Boolean   @default(true)
  is_local_meetup  Boolean   @default(true)
  status           String    @default("ACTIVE") // ACTIVE, SOLD, CANCELLED
  views            Int       @default(0)
  
  // Sponsored listing fields
  is_sponsored     Boolean   @default(false)
  sponsored_until  DateTime?
  sponsored_tier   Int?      // 1, 2, 3 for different sponsorship tiers

  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())

  // Media
  images           ListingMedia[] @relation("ListingImages")
  videos           ListingMedia[] @relation("ListingVideos")

  // Relations
  user             User      @relation(fields: [userId], references: [id])
  userId           String
  comments         Comment[]
  likes            Like[]
  bookmarks        Bookmark[]
  transactions     Transaction[]
  conversations     Conversation[]
}

model ListingMedia {
  id          String   @id @default(cuid())
  url         String
  type        String   // IMAGE, VIDEO
  listing     Listing  @relation("ListingImages", fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String
  created_at  DateTime @default(now())

  videoListing Listing? @relation("ListingVideos", fields: [videoListingId], references: [id], onDelete: Cascade)
  videoListingId String?
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
}

model Like {
  id          String   @id @default(cuid())
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime @default(now())

  @@unique([userId, listingId])
}

model Bookmark {
  id          String   @id @default(cuid())
  listing     Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  created_at  DateTime @default(now())

  @@unique([userId, listingId])
}

model Transaction {
  id              String    @id @default(cuid())
  listingId       String
  buyerId         String
  sellerId        String
  status          String    // PENDING, COMPLETED, CANCELLED
  paymentMethod   String?   // PAYSTACK, CASH
  paymentStatus   String?   // PENDING, PAID, FAILED, REFUNDED
  paymentId       String?   // Payment reference/ID from payment provider
  amount          Float
  meetupLocation  String?
  meetupTime      DateTime?
  escrowEnabled   Boolean   @default(false)
  escrow          Escrow?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  listing         Listing   @relation(fields: [listingId], references: [id])
  buyer           User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller          User      @relation("SellerTransactions", fields: [sellerId], references: [id])
  
  reviews          Review[]
}

model Escrow {
  id            String      @id @default(cuid())
  transactionId String      @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  amount        Float
  status        String      // PENDING, RELEASED, REFUNDED, DISPUTED
  releaseDue    DateTime    // When the funds should be released
  releaseDate   DateTime?   // When the funds were actually released
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@map("escrows")
}

model Review {
  id            String      @id @default(cuid())
  rating        Int         @db.SmallInt
  comment       String      @db.Text
  created_at    DateTime    @default(now())
  updated_at    DateTime    @default(now())
  
  // Relations
  reviewer      User        @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId    String
  reviewed      User        @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  reviewedId    String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  @@unique([reviewerId, transactionId])
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  title       String
  message     String
  data        Json?
  is_read     Boolean   @default(false)
  read_at     DateTime?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  user        User      @relation("ReceivedNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  sender      User?     @relation("SentNotifications", fields: [senderId], references: [id], onDelete: SetNull)
  senderId    String?

  @@index([userId])
  @@index([senderId])
  @@index([created_at])
}

model Conversation {
  id            String    @id @default(cuid())
  participants  User[]    @relation("UserConversations")
  messages      Message[]
  listing       Listing?  @relation(fields: [listingId], references: [id])
  listingId     String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Message {
  id              String       @id @default(cuid())
  content         String       @db.Text
  type            String      // TEXT, IMAGE, LINK
  media_url       String?
  is_read         Boolean     @default(false)
  read_at         DateTime?
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  sender          User        @relation("SentMessages", fields: [senderId], references: [id])
  senderId        String
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}
